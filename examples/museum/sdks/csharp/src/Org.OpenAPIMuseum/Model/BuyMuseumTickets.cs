/*
 * Redocly Museum API
 *
 * Imaginary, but delightful Museum API for interacting with museum services and information. Built with love by Redocly.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: team@redocly.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPIMuseum.Client.OpenAPIDateConverter;

namespace Org.OpenAPIMuseum.Model
{
    /// <summary>
    /// Data to purchase a ticket.
    /// </summary>
    [DataContract(Name = "BuyMuseumTickets")]
    public partial class BuyMuseumTickets : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TicketType
        /// </summary>
        [DataMember(Name = "ticketType", IsRequired = true, EmitDefaultValue = true)]
        public TicketType TicketType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuyMuseumTickets" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BuyMuseumTickets() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuyMuseumTickets" /> class.
        /// </summary>
        /// <param name="ticketId">Unique identifier for museum ticket. Generated when purchased..</param>
        /// <param name="ticketDate">ticketDate (required).</param>
        /// <param name="ticketType">ticketType (required).</param>
        /// <param name="eventId">Identifier for a special event..</param>
        /// <param name="email">Email address for ticket purchaser..</param>
        public BuyMuseumTickets(Guid ticketId = default(Guid), DateOnly ticketDate = default(DateOnly), TicketType ticketType = default(TicketType), Guid eventId = default(Guid), string email = default(string))
        {
            this.TicketDate = ticketDate;
            this.TicketType = ticketType;
            this.TicketId = ticketId;
            this.EventId = eventId;
            this.Email = email;
        }

        /// <summary>
        /// Unique identifier for museum ticket. Generated when purchased.
        /// </summary>
        /// <value>Unique identifier for museum ticket. Generated when purchased.</value>
        /*
        <example>a54a57ca-36f8-421b-a6b4-2e8f26858a4c</example>
        */
        [DataMember(Name = "ticketId", EmitDefaultValue = false)]
        public Guid TicketId { get; set; }

        /// <summary>
        /// Gets or Sets TicketDate
        /// </summary>
        /*
        <example>2023-10-29</example>
        */
        [DataMember(Name = "ticketDate", IsRequired = true, EmitDefaultValue = true)]
        public DateOnly TicketDate { get; set; }

        /// <summary>
        /// Identifier for a special event.
        /// </summary>
        /// <value>Identifier for a special event.</value>
        /*
        <example>3be6453c-03eb-4357-ae5a-984a0e574a54</example>
        */
        [DataMember(Name = "eventId", EmitDefaultValue = false)]
        public Guid EventId { get; set; }

        /// <summary>
        /// Email address for ticket purchaser.
        /// </summary>
        /// <value>Email address for ticket purchaser.</value>
        /*
        <example>museum-lover@example.com</example>
        */
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BuyMuseumTickets {\n");
            sb.Append("  TicketId: ").Append(TicketId).Append("\n");
            sb.Append("  TicketDate: ").Append(TicketDate).Append("\n");
            sb.Append("  TicketType: ").Append(TicketType).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
