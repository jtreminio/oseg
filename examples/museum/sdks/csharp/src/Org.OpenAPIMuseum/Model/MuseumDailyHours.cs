/*
 * Redocly Museum API
 *
 * Imaginary, but delightful Museum API for interacting with museum services and information. Built with love by Redocly.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: team@redocly.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPIMuseum.Client.OpenAPIDateConverter;

namespace Org.OpenAPIMuseum.Model
{
    /// <summary>
    /// Daily operating hours for the museum.
    /// </summary>
    [DataContract(Name = "MuseumDailyHours")]
    public partial class MuseumDailyHours : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MuseumDailyHours" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MuseumDailyHours() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MuseumDailyHours" /> class.
        /// </summary>
        /// <param name="date">date (required).</param>
        /// <param name="timeOpen">Time the museum opens on a specific date. Uses 24 hour time format (&#x60;HH:mm&#x60;). (required).</param>
        /// <param name="timeClose">Time the museum closes on a specific date. Uses 24 hour time format (&#x60;HH:mm&#x60;). (required).</param>
        public MuseumDailyHours(DateOnly date = default(DateOnly), string timeOpen = default(string), string timeClose = default(string))
        {
            this.Date = date;
            // to ensure "timeOpen" is required (not null)
            if (timeOpen == null)
            {
                throw new ArgumentNullException("timeOpen is a required property for MuseumDailyHours and cannot be null");
            }
            this.TimeOpen = timeOpen;
            // to ensure "timeClose" is required (not null)
            if (timeClose == null)
            {
                throw new ArgumentNullException("timeClose is a required property for MuseumDailyHours and cannot be null");
            }
            this.TimeClose = timeClose;
        }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        /*
        <example>2023-10-29</example>
        */
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = true)]
        public DateOnly Date { get; set; }

        /// <summary>
        /// Time the museum opens on a specific date. Uses 24 hour time format (&#x60;HH:mm&#x60;).
        /// </summary>
        /// <value>Time the museum opens on a specific date. Uses 24 hour time format (&#x60;HH:mm&#x60;).</value>
        /*
        <example>09:00</example>
        */
        [DataMember(Name = "timeOpen", IsRequired = true, EmitDefaultValue = true)]
        public string TimeOpen { get; set; }

        /// <summary>
        /// Time the museum closes on a specific date. Uses 24 hour time format (&#x60;HH:mm&#x60;).
        /// </summary>
        /// <value>Time the museum closes on a specific date. Uses 24 hour time format (&#x60;HH:mm&#x60;).</value>
        /*
        <example>18:00</example>
        */
        [DataMember(Name = "timeClose", IsRequired = true, EmitDefaultValue = true)]
        public string TimeClose { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MuseumDailyHours {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  TimeOpen: ").Append(TimeOpen).Append("\n");
            sb.Append("  TimeClose: ").Append(TimeClose).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.TimeOpen != null) {
                // TimeOpen (string) pattern
                Regex regexTimeOpen = new Regex(@"^([01]\d|2[0-3]):?([0-5]\d)$", RegexOptions.CultureInvariant);
                if (!regexTimeOpen.Match(this.TimeOpen).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TimeOpen, must match a pattern of " + regexTimeOpen, new [] { "TimeOpen" });
                }
            }

            if (this.TimeClose != null) {
                // TimeClose (string) pattern
                Regex regexTimeClose = new Regex(@"^([01]\d|2[0-3]):?([0-5]\d)$", RegexOptions.CultureInvariant);
                if (!regexTimeClose.Match(this.TimeClose).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TimeClose, must match a pattern of " + regexTimeClose, new [] { "TimeClose" });
                }
            }

            yield break;
        }
    }

}
