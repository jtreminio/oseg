/*
 * Redocly Museum API
 * Imaginary, but delightful Museum API for interacting with museum services and information. Built with love by Redocly.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: team@redocly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapimuseum.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.UUID;
import org.openapimuseum.client.model.TicketType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapimuseum.client.JSON;

/**
 * Data to purchase a ticket.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class BuyMuseumTickets {
  public static final String SERIALIZED_NAME_TICKET_ID = "ticketId";
  @SerializedName(SERIALIZED_NAME_TICKET_ID)
  private UUID ticketId;

  public static final String SERIALIZED_NAME_TICKET_DATE = "ticketDate";
  @SerializedName(SERIALIZED_NAME_TICKET_DATE)
  private LocalDate ticketDate;

  public static final String SERIALIZED_NAME_TICKET_TYPE = "ticketType";
  @SerializedName(SERIALIZED_NAME_TICKET_TYPE)
  private TicketType ticketType;

  public static final String SERIALIZED_NAME_EVENT_ID = "eventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private UUID eventId;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public BuyMuseumTickets() {
  }

  public BuyMuseumTickets ticketId(UUID ticketId) {
    this.ticketId = ticketId;
    return this;
  }

  /**
   * Unique identifier for museum ticket. Generated when purchased.
   * @return ticketId
   */
  @javax.annotation.Nullable
  public UUID getTicketId() {
    return ticketId;
  }

  public void setTicketId(UUID ticketId) {
    this.ticketId = ticketId;
  }


  public BuyMuseumTickets ticketDate(LocalDate ticketDate) {
    this.ticketDate = ticketDate;
    return this;
  }

  /**
   * Get ticketDate
   * @return ticketDate
   */
  @javax.annotation.Nonnull
  public LocalDate getTicketDate() {
    return ticketDate;
  }

  public void setTicketDate(LocalDate ticketDate) {
    this.ticketDate = ticketDate;
  }


  public BuyMuseumTickets ticketType(TicketType ticketType) {
    this.ticketType = ticketType;
    return this;
  }

  /**
   * Get ticketType
   * @return ticketType
   */
  @javax.annotation.Nonnull
  public TicketType getTicketType() {
    return ticketType;
  }

  public void setTicketType(TicketType ticketType) {
    this.ticketType = ticketType;
  }


  public BuyMuseumTickets eventId(UUID eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * Identifier for a special event.
   * @return eventId
   */
  @javax.annotation.Nullable
  public UUID getEventId() {
    return eventId;
  }

  public void setEventId(UUID eventId) {
    this.eventId = eventId;
  }


  public BuyMuseumTickets email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Email address for ticket purchaser.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuyMuseumTickets buyMuseumTickets = (BuyMuseumTickets) o;
    return Objects.equals(this.ticketId, buyMuseumTickets.ticketId) &&
        Objects.equals(this.ticketDate, buyMuseumTickets.ticketDate) &&
        Objects.equals(this.ticketType, buyMuseumTickets.ticketType) &&
        Objects.equals(this.eventId, buyMuseumTickets.eventId) &&
        Objects.equals(this.email, buyMuseumTickets.email);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ticketId, ticketDate, ticketType, eventId, email);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuyMuseumTickets {\n");
    sb.append("    ticketId: ").append(toIndentedString(ticketId)).append("\n");
    sb.append("    ticketDate: ").append(toIndentedString(ticketDate)).append("\n");
    sb.append("    ticketType: ").append(toIndentedString(ticketType)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ticketId");
    openapiFields.add("ticketDate");
    openapiFields.add("ticketType");
    openapiFields.add("eventId");
    openapiFields.add("email");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ticketDate");
    openapiRequiredFields.add("ticketType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuyMuseumTickets
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuyMuseumTickets.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuyMuseumTickets is not found in the empty JSON string", BuyMuseumTickets.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuyMuseumTickets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuyMuseumTickets` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BuyMuseumTickets.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ticketId") != null && !jsonObj.get("ticketId").isJsonNull()) && !jsonObj.get("ticketId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ticketId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ticketId").toString()));
      }
      // validate the required field `ticketType`
      TicketType.validateJsonElement(jsonObj.get("ticketType"));
      if ((jsonObj.get("eventId") != null && !jsonObj.get("eventId").isJsonNull()) && !jsonObj.get("eventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventId").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuyMuseumTickets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuyMuseumTickets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuyMuseumTickets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuyMuseumTickets.class));

       return (TypeAdapter<T>) new TypeAdapter<BuyMuseumTickets>() {
           @Override
           public void write(JsonWriter out, BuyMuseumTickets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuyMuseumTickets read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuyMuseumTickets given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuyMuseumTickets
   * @throws IOException if the JSON string is invalid with respect to BuyMuseumTickets
   */
  public static BuyMuseumTickets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuyMuseumTickets.class);
  }

  /**
   * Convert an instance of BuyMuseumTickets to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

