import unittest
from oseg import parser


class TestNormalizeStr(unittest.TestCase):
    def test_underscore(self):
        data = {
            "A": "A",
            "a": "a",
            "Ab": "Ab",
            "AB": "AB",
            "aB": "a_B",
            "OAuthName": "O_Auth_Name",
            "abcdefg123hij456": "abcdefg123hij456",
            "Abcdefg123hij456": "Abcdefg123hij456",
            "ABcdefg123hij456": "A_Bcdefg123hij456",
            "ABCdefg123hij456": "AB_Cdefg123hij456",
            "ABCDefg123hij456": "ABC_Defg123hij456",
            "ABCDEfg123hij456": "ABCD_Efg123hij456",
            "ABCDEFg123hij456": "ABCDEFg123hij456",
            "ABCDEFG123hij456": "ABCDEFG123hij456",
            "ABCDEFG123Hij456": "ABCDEFG123_Hij456",
            "ABCDEFG123HIj456": "ABCDEFG123_HIj456",
            "ABCDEFG123HIJ456": "ABCDEFG123_HIJ456",
            "ABCDEFG123HiJ456": "ABCDEFG123_Hi_J456",
            "ABCDEFG123hiJ456": "ABCDEFG123hi_J456",
            "ABCDEFG123hIJ456": "ABCDEFG123h_IJ456",
            "aBcdefg123hij456": "a_Bcdefg123hij456",
            "aBCdefg123hij456": "a_B_Cdefg123hij456",
            "aBCDefg123hij456": "a_BC_Defg123hij456",
            "aBCDEfg123hij456": "a_BCD_Efg123hij456",
            "aBCDEFg123hij456": "a_BCDEFg123hij456",
            "aBCDEFG123hij456": "a_BCDEFG123hij456",
            "aBcDeFg123hIj456": "a_Bc_De_Fg123h_Ij456",
            "HelloWorld!123": "Hello_World_123",
            "MixEDCase$#42": "Mix_ED_Case__42",
            "Snake_Case-Test": "Snake_Case_Test",
            "CamelCase99!": "Camel_Case99",
            "Python@Rocks2024": "Python_Rocks2024",
            "myVariable&*()": "my_Variable",
            "Some-Thing#Here": "Some_Thing_Here",
            "No$SpacesAllowed99": "No_Spaces_Allowed99",
            "justA_TestString!": "just_A_Test_String",
            "What?Ever*YouSay": "What_Ever_You_Say",
            "UserID_789": "User_ID_789",
            "Go4It-Now!": "Go4_It_Now",
            "Check_ME@THIS": "Check_ME_THIS",
            "JavaScript$Rules!": "Java_Script_Rules",
            "Best_Choice_2025*": "Best_Choice_2025",
            "Happy_Days": "Happy_Days",
            "Let's-Try_This-One!": "Let_s_Try_This_One",
            "Make$It$Count24": "Make_It_Count24",
            "Code-Lover@Heart": "Code_Lover_Heart",
            "Dev&Ops-24/7": "Dev_Ops_24_7",
            "Super#Cool_Project": "Super_Cool_Project",
            "WhatIs_This?": "What_Is_This",
            "42AnswerToEverything!": "42_Answer_To_Everything",
            "API@Version_3.0": "API_Version_3_0",
            "Let'sDo_This-Again!": "Let_s_Do_This_Again",
        }

        for provided, expected in data.items():
            with self.subTest(provided):
                result = parser.NormalizeStr.underscore(provided)

                self.assertEqual(
                    first=expected,
                    second=result,
                    msg=f"Provided: {provided}, Expected: {expected}, Result: {result}",
                )

    def test_underscore_e(self):
        data = {
            "A": "A",
            "a": "a",
            "Ab": "Ab",
            "AB": "A_B",
            "aB": "a_B",
            "OAuthName": "O_Auth_Name",
            "abcdefg123hij456": "abcdefg123hij456",
            "Abcdefg123hij456": "Abcdefg123hij456",
            "ABcdefg123hij456": "A_Bcdefg123hij456",
            "ABCdefg123hij456": "A_B_Cdefg123hij456",
            "ABCDefg123hij456": "A_BC_Defg123hij456",
            "ABCDEfg123hij456": "A_BCD_Efg123hij456",
            "ABCDEFg123hij456": "A_BCDEFg123hij456",
            "ABCDEFG123hij456": "A_BCDEFG123hij456",
            "ABCDEFG123Hij456": "A_BCDEFG123_Hij456",
            "ABCDEFG123HIj456": "A_BCDEFG123_HIj456",
            "ABCDEFG123HIJ456": "A_BCDEFG123_HIJ456",
            "ABCDEFG123HiJ456": "A_BCDEFG123_Hi_J456",
            "ABCDEFG123hiJ456": "A_BCDEFG123hi_J456",
            "ABCDEFG123hIJ456": "A_BCDEFG123h_IJ456",
            "aBcdefg123hij456": "a_Bcdefg123hij456",
            "aBCdefg123hij456": "a_B_Cdefg123hij456",
            "aBCDefg123hij456": "a_BC_Defg123hij456",
            "aBCDEfg123hij456": "a_BCD_Efg123hij456",
            "aBCDEFg123hij456": "a_BCDEFg123hij456",
            "aBCDEFG123hij456": "a_BCDEFG123hij456",
            "aBcDeFg123hIj456": "a_Bc_De_Fg123h_Ij456",
            "HelloWorld!123": "Hello_World_123",
            "MixEDCase$#42": "Mix_ED_Case__42",
            "Snake_Case-Test": "Snake_Case_Test",
            "CamelCase99!": "Camel_Case99",
            "Python@Rocks2024": "Python_Rocks2024",
            "myVariable&*()": "my_Variable",
            "Some-Thing#Here": "Some_Thing_Here",
            "No$SpacesAllowed99": "No_Spaces_Allowed99",
            "justA_TestString!": "just_A_Test_String",
            "What?Ever*YouSay": "What_Ever_You_Say",
            "UserID_789": "User_ID_789",
            "Go4It-Now!": "Go4_It_Now",
            "Check_ME@THIS": "Check_ME_THIS",
            "JavaScript$Rules!": "Java_Script_Rules",
            "Best_Choice_2025*": "Best_Choice_2025",
            "Happy_Days": "Happy_Days",
            "Let's-Try_This-One!": "Let_s_Try_This_One",
            "Make$It$Count24": "Make_It_Count24",
            "Code-Lover@Heart": "Code_Lover_Heart",
            "Dev&Ops-24/7": "Dev_Ops_24_7",
            "Super#Cool_Project": "Super_Cool_Project",
            "WhatIs_This?": "What_Is_This",
            "42AnswerToEverything!": "42_Answer_To_Everything",
            "API@Version_3.0": "A_PI_Version_3_0",
            "Let'sDo_This-Again!": "Let_s_Do_This_Again",
        }

        for provided, expected in data.items():
            with self.subTest(provided):
                result = parser.NormalizeStr.underscore_e(provided)

                self.assertEqual(
                    first=expected,
                    second=result,
                    msg=f"Provided: {provided}, Expected: {expected}, Result: {result}",
                )

    def test_camel_case(self):
        data = {
            "A": "a",
            "a": "a",
            "Ab": "ab",
            "AB": "aB",
            "aB": "aB",
            "OAuthName": "oAuthName",
            "abcdefg123hij456": "abcdefg123hij456",
            "Abcdefg123hij456": "abcdefg123hij456",
            "ABcdefg123hij456": "aBcdefg123hij456",
            "ABCdefg123hij456": "aBCdefg123hij456",
            "ABCDefg123hij456": "aBCDefg123hij456",
            "ABCDEfg123hij456": "aBCDEfg123hij456",
            "ABCDEFg123hij456": "aBCDEFg123hij456",
            "ABCDEFG123hij456": "aBCDEFG123hij456",
            "ABCDEFG123Hij456": "aBCDEFG123Hij456",
            "ABCDEFG123HIj456": "aBCDEFG123HIj456",
            "ABCDEFG123HIJ456": "aBCDEFG123HIJ456",
            "ABCDEFG123HiJ456": "aBCDEFG123HiJ456",
            "ABCDEFG123hiJ456": "aBCDEFG123hiJ456",
            "ABCDEFG123hIJ456": "aBCDEFG123hIJ456",
            "aBcdefg123hij456": "aBcdefg123hij456",
            "aBCdefg123hij456": "aBCdefg123hij456",
            "aBCDefg123hij456": "aBCDefg123hij456",
            "aBCDEfg123hij456": "aBCDEfg123hij456",
            "aBCDEFg123hij456": "aBCDEFg123hij456",
            "aBCDEFG123hij456": "aBCDEFG123hij456",
            "aBcDeFg123hIj456": "aBcDeFg123hIj456",
            "HelloWorld!123": "helloWorld123",
            "MixEDCase$#42": "mixEDCase42",
            "Snake_Case-Test": "snakeCaseTest",
            "CamelCase99!": "camelCase99",
            "Python@Rocks2024": "pythonRocks2024",
            "myVariable&*()": "myVariable",
            "Some-Thing#Here": "someThingHere",
            "No$SpacesAllowed99": "noSpacesAllowed99",
            "justA_TestString!": "justATestString",
            "What?Ever*YouSay": "whatEverYouSay",
            "UserID_789": "userID789",
            "Go4It-Now!": "go4ItNow",
            "Check_ME@THIS": "checkMETHIS",
            "JavaScript$Rules!": "javaScriptRules",
            "Best_Choice_2025*": "bestChoice2025",
            "Happy_Days": "happyDays",
            "Let's-Try_This-One!": "letSTryThisOne",
            "Make$It$Count24": "makeItCount24",
            "Code-Lover@Heart": "codeLoverHeart",
            "Dev&Ops-24/7": "devOps247",
            "Super#Cool_Project": "superCoolProject",
            "WhatIs_This?": "whatIsThis",
            "42AnswerToEverything!": "42AnswerToEverything",
            "API@Version_3.0": "aPIVersion30",
            "Let'sDo_This-Again!": "letSDoThisAgain",
        }

        for provided, expected in data.items():
            with self.subTest(provided):
                result = parser.NormalizeStr.camel_case(provided)

                self.assertEqual(
                    first=expected,
                    second=result,
                    msg=f"Provided: {provided}, Expected: {expected}, Result: {result}",
                )

    def test_pascal_case(self):
        data = {
            "A": "A",
            "a": "A",
            "Ab": "Ab",
            "AB": "AB",
            "aB": "AB",
            "OAuthName": "OAuthName",
            "abcdefg123hij456": "Abcdefg123hij456",
            "Abcdefg123hij456": "Abcdefg123hij456",
            "ABcdefg123hij456": "ABcdefg123hij456",
            "ABCdefg123hij456": "ABCdefg123hij456",
            "ABCDefg123hij456": "ABCDefg123hij456",
            "ABCDEfg123hij456": "ABCDEfg123hij456",
            "ABCDEFg123hij456": "ABCDEFg123hij456",
            "ABCDEFG123hij456": "ABCDEFG123hij456",
            "ABCDEFG123Hij456": "ABCDEFG123Hij456",
            "ABCDEFG123HIj456": "ABCDEFG123HIj456",
            "ABCDEFG123HIJ456": "ABCDEFG123HIJ456",
            "ABCDEFG123HiJ456": "ABCDEFG123HiJ456",
            "ABCDEFG123hiJ456": "ABCDEFG123hiJ456",
            "ABCDEFG123hIJ456": "ABCDEFG123hIJ456",
            "aBcdefg123hij456": "ABcdefg123hij456",
            "aBCdefg123hij456": "ABCdefg123hij456",
            "aBCDefg123hij456": "ABCDefg123hij456",
            "aBCDEfg123hij456": "ABCDEfg123hij456",
            "aBCDEFg123hij456": "ABCDEFg123hij456",
            "aBCDEFG123hij456": "ABCDEFG123hij456",
            "aBcDeFg123hIj456": "ABcDeFg123hIj456",
            "HelloWorld!123": "HelloWorld123",
            "MixEDCase$#42": "MixEDCase42",
            "Snake_Case-Test": "SnakeCaseTest",
            "CamelCase99!": "CamelCase99",
            "Python@Rocks2024": "PythonRocks2024",
            "myVariable&*()": "MyVariable",
            "Some-Thing#Here": "SomeThingHere",
            "No$SpacesAllowed99": "NoSpacesAllowed99",
            "justA_TestString!": "JustATestString",
            "What?Ever*YouSay": "WhatEverYouSay",
            "UserID_789": "UserID789",
            "Go4It-Now!": "Go4ItNow",
            "Check_ME@THIS": "CheckMETHIS",
            "JavaScript$Rules!": "JavaScriptRules",
            "Best_Choice_2025*": "BestChoice2025",
            "Happy_Days": "HappyDays",
            "Let's-Try_This-One!": "LetSTryThisOne",
            "Make$It$Count24": "MakeItCount24",
            "Code-Lover@Heart": "CodeLoverHeart",
            "Dev&Ops-24/7": "DevOps247",
            "Super#Cool_Project": "SuperCoolProject",
            "WhatIs_This?": "WhatIsThis",
            "42AnswerToEverything!": "42AnswerToEverything",
            "API@Version_3.0": "APIVersion30",
            "Let'sDo_This-Again!": "LetSDoThisAgain",
        }

        for provided, expected in data.items():
            with self.subTest(provided):
                result = parser.NormalizeStr.pascal_case(provided)

                self.assertEqual(
                    first=expected,
                    second=result,
                    msg=f"Provided: {provided}, Expected: {expected}, Result: {result}",
                )

    def test_snake_case(self):
        data = {
            "A": "a",
            "a": "a",
            "Ab": "ab",
            "AB": "ab",
            "aB": "a_b",
            "OAuthName": "o_auth_name",
            "abcdefg123hij456": "abcdefg123hij456",
            "Abcdefg123hij456": "abcdefg123hij456",
            "ABcdefg123hij456": "a_bcdefg123hij456",
            "ABCdefg123hij456": "ab_cdefg123hij456",
            "ABCDefg123hij456": "abc_defg123hij456",
            "ABCDEfg123hij456": "abcd_efg123hij456",
            "ABCDEFg123hij456": "abcdefg123hij456",
            "ABCDEFG123hij456": "abcdefg123hij456",
            "ABCDEFG123Hij456": "abcdefg123_hij456",
            "ABCDEFG123HIj456": "abcdefg123_hij456",
            "ABCDEFG123HIJ456": "abcdefg123_hij456",
            "ABCDEFG123HiJ456": "abcdefg123_hi_j456",
            "ABCDEFG123hiJ456": "abcdefg123hi_j456",
            "ABCDEFG123hIJ456": "abcdefg123h_ij456",
            "aBcdefg123hij456": "a_bcdefg123hij456",
            "aBCdefg123hij456": "a_b_cdefg123hij456",
            "aBCDefg123hij456": "a_bc_defg123hij456",
            "aBCDEfg123hij456": "a_bcd_efg123hij456",
            "aBCDEFg123hij456": "a_bcdefg123hij456",
            "aBCDEFG123hij456": "a_bcdefg123hij456",
            "aBcDeFg123hIj456": "a_bc_de_fg123h_ij456",
            "HelloWorld!123": "hello_world_123",
            "MixEDCase$#42": "mix_ed_case__42",
            "Snake_Case-Test": "snake_case_test",
            "CamelCase99!": "camel_case99",
            "Python@Rocks2024": "python_rocks2024",
            "myVariable&*()": "my_variable",
            "Some-Thing#Here": "some_thing_here",
            "No$SpacesAllowed99": "no_spaces_allowed99",
            "justA_TestString!": "just_a_test_string",
            "What?Ever*YouSay": "what_ever_you_say",
            "UserID_789": "user_id_789",
            "Go4It-Now!": "go4_it_now",
            "Check_ME@THIS": "check_me_this",
            "JavaScript$Rules!": "java_script_rules",
            "Best_Choice_2025*": "best_choice_2025",
            "Happy_Days": "happy_days",
            "Let's-Try_This-One!": "let_s_try_this_one",
            "Make$It$Count24": "make_it_count24",
            "Code-Lover@Heart": "code_lover_heart",
            "Dev&Ops-24/7": "dev_ops_24_7",
            "Super#Cool_Project": "super_cool_project",
            "WhatIs_This?": "what_is_this",
            "42AnswerToEverything!": "42_answer_to_everything",
            "API@Version_3.0": "api_version_3_0",
            "Let'sDo_This-Again!": "let_s_do_this_again",
        }

        for provided, expected in data.items():
            with self.subTest(provided):
                result = parser.NormalizeStr.snake_case(provided)

                self.assertEqual(
                    first=expected,
                    second=result,
                    msg=f"Provided: {provided}, Expected: {expected}, Result: {result}",
                )

    def test_uc_first(self):
        data = {
            "A": "A",
            "a": "A",
            "Ab": "Ab",
            "AB": "AB",
            "aB": "AB",
            "OAuthName": "OAuthName",
            "abcdefg123hij456": "Abcdefg123hij456",
            "Abcdefg123hij456": "Abcdefg123hij456",
            "ABcdefg123hij456": "ABcdefg123hij456",
            "ABCdefg123hij456": "ABCdefg123hij456",
            "ABCDefg123hij456": "ABCDefg123hij456",
            "ABCDEfg123hij456": "ABCDEfg123hij456",
            "ABCDEFg123hij456": "ABCDEFg123hij456",
            "ABCDEFG123hij456": "ABCDEFG123hij456",
            "ABCDEFG123Hij456": "ABCDEFG123Hij456",
            "ABCDEFG123HIj456": "ABCDEFG123HIj456",
            "ABCDEFG123HIJ456": "ABCDEFG123HIJ456",
            "ABCDEFG123HiJ456": "ABCDEFG123HiJ456",
            "ABCDEFG123hiJ456": "ABCDEFG123hiJ456",
            "ABCDEFG123hIJ456": "ABCDEFG123hIJ456",
            "aBcdefg123hij456": "ABcdefg123hij456",
            "aBCdefg123hij456": "ABCdefg123hij456",
            "aBCDefg123hij456": "ABCDefg123hij456",
            "aBCDEfg123hij456": "ABCDEfg123hij456",
            "aBCDEFg123hij456": "ABCDEFg123hij456",
            "aBCDEFG123hij456": "ABCDEFG123hij456",
            "aBcDeFg123hIj456": "ABcDeFg123hIj456",
            "HelloWorld!123": "HelloWorld!123",
            "MixEDCase$#42": "MixEDCase$#42",
            "Snake_Case-Test": "Snake_Case-Test",
            "CamelCase99!": "CamelCase99!",
            "Python@Rocks2024": "Python@Rocks2024",
            "myVariable&*()": "MyVariable&*()",
            "Some-Thing#Here": "Some-Thing#Here",
            "No$SpacesAllowed99": "No$SpacesAllowed99",
            "justA_TestString!": "JustA_TestString!",
            "What?Ever*YouSay": "What?Ever*YouSay",
            "UserID_789": "UserID_789",
            "Go4It-Now!": "Go4It-Now!",
            "Check_ME@THIS": "Check_ME@THIS",
            "JavaScript$Rules!": "JavaScript$Rules!",
            "Best_Choice_2025*": "Best_Choice_2025*",
            "Happy_Days": "Happy_Days",
            "Let's-Try_This-One!": "Let's-Try_This-One!",
            "Make$It$Count24": "Make$It$Count24",
            "Code-Lover@Heart": "Code-Lover@Heart",
            "Dev&Ops-24/7": "Dev&Ops-24/7",
            "Super#Cool_Project": "Super#Cool_Project",
            "WhatIs_This?": "WhatIs_This?",
            "42AnswerToEverything!": "42AnswerToEverything!",
            "API@Version_3.0": "API@Version_3.0",
            "Let'sDo_This-Again!": "Let'sDo_This-Again!",
        }

        for provided, expected in data.items():
            with self.subTest(provided):
                result = parser.NormalizeStr.uc_first(provided)

                self.assertEqual(
                    first=expected,
                    second=result,
                    msg=f"Provided: {provided}, Expected: {expected}, Result: {result}",
                )

    def test_pascalize(self):
        data = {
            "A": "A",
            "a": "A",
            "Ab": "Ab",
            "AB": "Ab",
            "aB": "AB",
            "OAuthName": "OAuthName",
            "abcdefg123hij456": "Abcdefg123hij456",
            "Abcdefg123hij456": "Abcdefg123hij456",
            "ABcdefg123hij456": "ABcdefg123hij456",
            "ABCdefg123hij456": "AbCdefg123hij456",
            "ABCDefg123hij456": "AbcDefg123hij456",
            "ABCDEfg123hij456": "AbcdEfg123hij456",
            "ABCDEFg123hij456": "Abcdefg123hij456",
            "ABCDEFG123hij456": "Abcdefg123hij456",
            "ABCDEFG123Hij456": "Abcdefg123Hij456",
            "ABCDEFG123HIj456": "Abcdefg123Hij456",
            "ABCDEFG123HIJ456": "Abcdefg123Hij456",
            "ABCDEFG123HiJ456": "Abcdefg123HiJ456",
            "ABCDEFG123hiJ456": "Abcdefg123hiJ456",
            "ABCDEFG123hIJ456": "Abcdefg123hIj456",
            "aBcdefg123hij456": "ABcdefg123hij456",
            "aBCdefg123hij456": "ABCdefg123hij456",
            "aBCDefg123hij456": "ABcDefg123hij456",
            "aBCDEfg123hij456": "ABcdEfg123hij456",
            "aBCDEFg123hij456": "ABcdefg123hij456",
            "aBCDEFG123hij456": "ABcdefg123hij456",
            "aBcDeFg123hIj456": "ABcDeFg123hIj456",
            "HelloWorld!123": "HelloWorld123",
            "MixEDCase$#42": "MixEdCase42",
            "Snake_Case-Test": "SnakeCaseTest",
            "CamelCase99!": "CamelCase99",
            "Python@Rocks2024": "PythonRocks2024",
            "myVariable&*()": "MyVariable",
            "Some-Thing#Here": "SomeThingHere",
            "No$SpacesAllowed99": "NoSpacesAllowed99",
            "justA_TestString!": "JustATestString",
            "What?Ever*YouSay": "WhatEverYouSay",
            "UserID_789": "UserId789",
            "Go4It-Now!": "Go4ItNow",
            "Check_ME@THIS": "CheckMeThis",
            "JavaScript$Rules!": "JavaScriptRules",
            "Best_Choice_2025*": "BestChoice2025",
            "Happy_Days": "HappyDays",
            "Let's-Try_This-One!": "LetSTryThisOne",
            "Make$It$Count24": "MakeItCount24",
            "Code-Lover@Heart": "CodeLoverHeart",
            "Dev&Ops-24/7": "DevOps247",
            "Super#Cool_Project": "SuperCoolProject",
            "WhatIs_This?": "WhatIsThis",
            "42AnswerToEverything!": "42AnswerToEverything",
            "API@Version_3.0": "ApiVersion30",
            "Let'sDo_This-Again!": "LetSDoThisAgain",
            "AI configs (beta) Api": "AiConfigsBetaApi",
            "AI Configs (beta) Api": "AiConfigsBetaApi",
            "AIconfigs (beta) Api": "AIconfigsBetaApi",
            "AIConfigs (beta) Api": "AiConfigsBetaApi",
            "AIConfigs(beta) Api": "AiConfigsBetaApi",
            "AIConfigs(Beta) Api": "AiConfigsBetaApi",
            "AIConfigsBeta) Api": "AiConfigsBetaApi",
            "AI Configs Beta Api": "AiConfigsBetaApi",
            "AI configs (BETA) Api": "AiConfigsBetaApi",
            "abcd": "Abcd",
            "some-value": "SomeValue",
            "some_value": "SomeValue",
        }

        for provided, expected in data.items():
            with self.subTest(provided):
                result = parser.NormalizeStr.pascalize(provided)

                self.assertEqual(
                    first=expected,
                    second=result,
                    msg=f"Provided: {provided}, Expected: {expected}, Result: {result}",
                )
