=begin
#Redocly Museum API

#Imaginary, but delightful Museum API for interacting with museum services and information. Built with love by Redocly.

The version of the OpenAPI document: 1.2.1
Contact: team@redocly.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0

=end

require 'cgi'

module OpenapiMuseumClient
  class TicketsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Buy museum tickets
    # Purchase museum tickets for general entry or special events.
    # @param buy_museum_tickets [BuyMuseumTickets] 
    # @param [Hash] opts the optional parameters
    # @return [MuseumTicketsConfirmation]
    def buy_museum_tickets(buy_museum_tickets, opts = {})
      data, _status_code, _headers = buy_museum_tickets_with_http_info(buy_museum_tickets, opts)
      data
    end

    # Buy museum tickets
    # Purchase museum tickets for general entry or special events.
    # @param buy_museum_tickets [BuyMuseumTickets] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MuseumTicketsConfirmation, Integer, Hash)>] MuseumTicketsConfirmation data, response status code and response headers
    def buy_museum_tickets_with_http_info(buy_museum_tickets, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketsApi.buy_museum_tickets ...'
      end
      # verify the required parameter 'buy_museum_tickets' is set
      if @api_client.config.client_side_validation && buy_museum_tickets.nil?
        fail ArgumentError, "Missing the required parameter 'buy_museum_tickets' when calling TicketsApi.buy_museum_tickets"
      end
      # resource path
      local_var_path = '/tickets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(buy_museum_tickets)

      # return_type
      return_type = opts[:debug_return_type] || 'MuseumTicketsConfirmation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['MuseumPlaceholderAuth']

      new_options = opts.merge(
        :operation => :"TicketsApi.buy_museum_tickets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketsApi#buy_museum_tickets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get ticket QR code
    # Return an image of your ticket with scannable QR code. Used for event entry.
    # @param ticket_id [String] Identifier for a ticket to a museum event. Used to generate ticket image.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_ticket_code(ticket_id, opts = {})
      data, _status_code, _headers = get_ticket_code_with_http_info(ticket_id, opts)
      data
    end

    # Get ticket QR code
    # Return an image of your ticket with scannable QR code. Used for event entry.
    # @param ticket_id [String] Identifier for a ticket to a museum event. Used to generate ticket image.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_ticket_code_with_http_info(ticket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketsApi.get_ticket_code ...'
      end
      # verify the required parameter 'ticket_id' is set
      if @api_client.config.client_side_validation && ticket_id.nil?
        fail ArgumentError, "Missing the required parameter 'ticket_id' when calling TicketsApi.get_ticket_code"
      end
      # resource path
      local_var_path = '/tickets/{ticketId}/qr'.sub('{' + 'ticketId' + '}', CGI.escape(ticket_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/png', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['MuseumPlaceholderAuth']

      new_options = opts.merge(
        :operation => :"TicketsApi.get_ticket_code",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketsApi#get_ticket_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
