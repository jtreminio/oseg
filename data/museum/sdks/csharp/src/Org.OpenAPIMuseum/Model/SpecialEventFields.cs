/*
 * Redocly Museum API
 *
 * Imaginary, but delightful Museum API for interacting with museum services and information. Built with love by Redocly.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: team@redocly.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPIMuseum.Client.OpenAPIDateConverter;

namespace Org.OpenAPIMuseum.Model
{
    /// <summary>
    /// SpecialEventFields
    /// </summary>
    [DataContract(Name = "SpecialEventFields")]
    public partial class SpecialEventFields : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpecialEventFields" /> class.
        /// </summary>
        /// <param name="name">Name of the special event..</param>
        /// <param name="location">Location where the special event is held..</param>
        /// <param name="eventDescription">Description of the special event..</param>
        /// <param name="dates">List of planned dates for the special event..</param>
        /// <param name="price">Price of a ticket for the special event..</param>
        public SpecialEventFields(string name = default(string), string location = default(string), string eventDescription = default(string), List<DateOnly> dates = default(List<DateOnly>), float price = default(float))
        {
            this.Name = name;
            this.Location = location;
            this.EventDescription = eventDescription;
            this.Dates = dates;
            this.Price = price;
        }

        /// <summary>
        /// Name of the special event.
        /// </summary>
        /// <value>Name of the special event.</value>
        /// <example>Pirate Coding Workshop</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Location where the special event is held.
        /// </summary>
        /// <value>Location where the special event is held.</value>
        /// <example>Computer Room</example>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public string Location { get; set; }

        /// <summary>
        /// Description of the special event.
        /// </summary>
        /// <value>Description of the special event.</value>
        /// <example>Captain Blackbeard shares his love of the C...language. And possibly Arrrrr (R lang).</example>
        [DataMember(Name = "eventDescription", EmitDefaultValue = false)]
        public string EventDescription { get; set; }

        /// <summary>
        /// List of planned dates for the special event.
        /// </summary>
        /// <value>List of planned dates for the special event.</value>
        [DataMember(Name = "dates", EmitDefaultValue = false)]
        public List<DateOnly> Dates { get; set; }

        /// <summary>
        /// Price of a ticket for the special event.
        /// </summary>
        /// <value>Price of a ticket for the special event.</value>
        /// <example>25</example>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public float Price { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SpecialEventFields {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  EventDescription: ").Append(EventDescription).Append("\n");
            sb.Append("  Dates: ").Append(Dates).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
