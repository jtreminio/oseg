{%- macro print_scalar(printable) -%}
{{ printable.value }}
{%- endmacro -%}

{%- macro print_scalar_array(printable) -%}
    {% if printable.value == None %}nil{% else %}
[
        {% for i in printable.value %}
    {{ i }},
        {% endfor %}
]
    {%- endif %}
{%- endmacro -%}

{%- macro print_file(printable) -%}
    {% if printable.value == None %}nil{% else %}
File.new("{{ printable.value }}", "r")
    {%- endif %}
{%- endmacro -%}

{%- macro print_file_array(printable) -%}
    {% if printable.value == None %}nil{% else %}
[
        {% for i in printable.value %}
    File.new("{{ i }}", "r"),
        {% endfor %}
]
    {%- endif %}
{%- endmacro -%}

{%- macro print_free_form(printable) -%}
    {% if printable.value == None %}nil{% else %}
{
        {% for k, v in printable.value.items() %}
    "{{ k }}": {{ v }},
        {% endfor %}
}
    {%- endif %}
{%- endmacro -%}

{%- macro print_free_form_array(printable) -%}
    {% if printable.value == None %}nil{% else %}
[
        {% for obj in printable.value %}
    {
            {% for k, v in obj.items() %}
        "{{ k }}": {{ v }},
            {% endfor %}
    },
        {% endfor %}
]
    {%- endif %}
{%- endmacro -%}

{%- macro print_object(printable) -%}
{{ printable.value }}
{%- endmacro -%}

{%- macro print_object_array(printable) -%}
[
    {% for i in printable.value %}
    {{ i|snake_case }},
    {% endfor %}
]
{%- endmacro -%}

{%- import "_macros.jinja2" as m with context -%}

require "{{ sdk_options.additional_properties.gemName }}"

{{ sdk_options.additional_properties.moduleName }}.configure do |config|
end

{% for obj_name, obj in parse_request_objects(property_container).items() %}
    {% set parent_name = obj_name if obj_name != property_container.body.type else "" %}
    {% if not obj.is_array %}
{{ obj_name|setter_property_name }} = {{ sdk_options.additional_properties.moduleName }}::{{ obj.type|pascal_case }}.new
        {% call(properties) m.parse_object_properties_macro(obj, parent_name, 0) %}
            {% for name, value in properties.items() %}
{{ obj_name|setter_property_name }}.{{ name|setter_property_name }} = {{ value }}
            {% endfor %}
        {% endcall %}
    {% else %}
{{ obj_name|setter_property_name }} = {{ "" }}
        {%- call(value) m.parse_object_list_properties_macro(obj, parent_name, 0) %}
    {{- value }}
        {% endcall %}
    {% endif %}

{% endfor %}
begin
    api_caller = {{ sdk_options.additional_properties.moduleName }}::{{ operation.api_name|pascal_case }}Api.new

    {{ "" -}}
    {% if operation.response and operation.response.body  %}response = {% endif -%}
    api_caller.{{ operation.operation_id|snake_case }}(
{% call(properties) m.parse_request_properties_macro(property_container, 4, True) %}
    {% for name, value in properties.items() %}
        {{ value }},
    {% endfor %}
{% endcall %}
{% call(properties) m.parse_request_properties_macro(property_container, 4, False) %}
    {% if properties %}
        {
        {% for name, value in properties.items() %}
            {{ name|setter_property_name }}: {{ value }},
        {% endfor %}
        },
    {% endif %}
{% endcall %}
    )
{% if operation.response and operation.response.body and not operation.response.is_binary %}

    p response
{% elif operation.response and operation.response.is_binary %}

    FileUtils.cp(response.path, "path/to/file.zip")
{% endif %}
rescue {{ sdk_options.additional_properties.moduleName }}::ApiError => e
    puts "Exception when calling {{ operation.api_name|pascal_case }}#{{ operation.operation_id|snake_case }}: #{e}"
end
{{ "" }}
