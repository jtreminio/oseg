{%- macro print_scalar(parsed) -%}
{% if parsed.value == "null" %}undefined{% else %}
{{ parsed.value }}
{%- endif %}
{%- endmacro -%}

{%- macro print_scalar_array(parsed) -%}
    {% if parsed.values == None %}undefined{% else %}
[
        {% for i in parsed.values %}
    {{ i }},
        {% endfor %}
]
    {%- endif %}
{%- endmacro -%}

{%- macro print_file(parsed) -%}
    {% if parsed.values == None %}undefined{% else %}
fs.createReadStream("{{ parsed.value }}")
    {%- endif %}
{%- endmacro -%}

{%- macro print_file_array(parsed) -%}
    {% if parsed.values == None %}undefined{% else %}
[
        {% for i in parsed.values %}
    fs.createReadStream("{{ i }}"),
        {% endfor %}
]
    {%- endif %}
{%- endmacro -%}

{%- macro print_free_form(parsed) -%}
    {% if parsed.value == None %}undefined{% else %}
{
        {% for k, v in parsed.value.items() %}
    "{{ k }}": {{ v }},
        {% endfor %}
}
    {%- endif %}
{%- endmacro -%}

{%- macro print_free_form_array(parsed) -%}
    {% if parsed.values == None %}undefined{% else %}
[
        {% for obj in parsed.values %}
    {
            {% for k, v in obj.items() %}
        "{{ k }}": {{ v }},
            {% endfor %}
    },
        {% endfor %}
]
    {%- endif %}
{%- endmacro -%}

{%- macro print_object(parsed) -%}
    {% if parsed.value == None %}undefined{% else %}
{{ parsed.value }}
    {%- endif %}
{%- endmacro -%}

{%- macro print_object_array(parsed) -%}
    {% if parsed.value == None %}undefined{% else %}
[
    {% for i in parsed.values %}
    {{ i|camel_case }},
    {% endfor %}
]
    {%- endif %}
{%- endmacro -%}

{%- import "_macros.jinja2" as m with context -%}

import * as fs from 'fs';
import * as {{ sdk_options.additional_properties.npmName|snake_case }} from "{{ sdk_options.additional_properties.npmName }}";

const apiCaller = new {{ sdk_options.additional_properties.npmName|snake_case }}.{{ operation.api_name|pascal_case }}Api();

{% for obj_name, obj in parse_request_objects(property_container).items() %}
    {% set parent_name = obj_name if obj_name != property_container.body.type else "" %}
    {% if not obj.is_array %}
const {{ obj_name|setter_property_name }}: {{ sdk_options.additional_properties.npmName|snake_case }}.{{ obj.type }} = {
    {% call(properties) m.parse_object_properties_macro(obj, parent_name, 4) %}
        {% for name, value in properties.items() %}
    {{ name|setter_method_name }}: {{ value }},
        {% endfor %}
    {% endcall %}
};
    {% else %}
const {{ obj_name|setter_property_name }} = {{ "" }}
        {%- call(value) m.parse_object_list_properties_macro(obj, parent_name, 0) %}
    {{- value }};
        {% endcall %}
    {% endif %}

{% endfor %}
{% if operation.request.parameters or operation.request.has_formdata %}
    {% call(properties) m.parse_request_properties_macro(property_container, 4, null, False) %}
        {% for name, value in properties.items() %}
const {{ name|camel_case }} = {{ value }};
        {% endfor %}
    {% endcall %}

{% endif %}
apiCaller.{{ operation.operation_id|camel_case }}(
{% call(properties) m.parse_request_properties_macro(property_container, 4) %}
    {% for name, value in properties.items() %}
    {{ name|camel_case }},
    {% endfor %}
{% endcall %}
){% if operation.response and operation.response.body  %}.then(response => {
{% if not operation.response.is_binary %}
  console.log(response.body);
{% elif operation.response.is_binary %}
  fs.createWriteStream('file_response.zip').write(response.body);
{% endif -%}
}){% endif %}.catch(error => {
  console.log("Exception when calling {{ operation.api_name|pascal_case }}#{{ operation.operation_id|camel_case }}:");
  console.log(error.body);
});
{{ "" }}
