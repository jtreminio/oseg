{%- macro print_scalar(parsed) -%}
{{ parsed.value }}
{%- endmacro -%}

{%- macro print_scalar_array(parsed) -%}
    {% if parsed.values == None %}None{% else %}
[
        {% for i in parsed.values %}
    {{ i }},
        {% endfor %}
]
    {%- endif %}
{%- endmacro -%}

{%- macro print_file(parsed) -%}
    {% if parsed.values == None %}None{% else %}
open("{{ parsed.value }}", "rb").read()
    {%- endif %}
{%- endmacro -%}

{%- macro print_file_array(parsed) -%}
    {% if parsed.values == None %}None{% else %}
[
        {% for i in parsed.values %}
    open("{{ i }}", "rb").read(),
        {% endfor %}
]
    {%- endif %}
{%- endmacro -%}

{%- macro print_free_form(parsed) -%}
    {% if parsed.value == None %}None{% else %}
{
        {% for k, v in parsed.value.items() %}
    "{{ k }}": {{ v }},
        {% endfor %}
}
    {%- endif %}
{%- endmacro -%}

{%- macro print_free_form_array(parsed) -%}
    {% if parsed.values == None %}None{% else %}
[
        {% for obj in parsed.values %}
    {
            {% for k, v in obj.items() %}
        "{{ k }}": {{ v }},
            {% endfor %}
    },
        {% endfor %}
]
    {%- endif %}
{%- endmacro -%}

{%- macro print_object(parsed) -%}
{{ parsed.value }}
{%- endmacro -%}

{%- macro print_object_array(parsed) -%}
[
    {% for i in parsed.values %}
    {{ i|snake_case }},
    {% endfor %}
]
{%- endmacro -%}

{%- import "_macros.jinja2" as m with context -%}

from pprint import pprint

from {{ sdk_options.additional_properties.packageName }} import ApiClient, ApiException, Configuration, api, models

configuration = Configuration()

with ApiClient(configuration) as api_client:
{% for obj_name, obj in parse_request_objects(property_container).items() %}
    {% set parent_name = obj_name if obj_name != property_container.body.type else "" %}
    {% if not obj.is_array %}
    {{ obj_name|setter_property_name }} = models.{{ obj.type }}()
        {% call(properties) m.parse_object_properties_macro(obj, parent_name, 4) %}
            {% for name, value in properties.items() %}
    {{ obj_name|setter_property_name }}.{{ name }} = {{ value }}
            {% endfor %}
        {% endcall %}
    {% else %}
    {{ obj_name|setter_property_name }} = {{ "" }}
        {%- call(value) m.parse_object_list_properties_macro(obj, parent_name, 4) %}
            {{- value }}
        {% endcall %}
    {% endif %}

{% endfor %}
    try:
        api_caller = api.{{ operation.api_name|pascal_case }}Api(api_client)

        {{ "" -}}
        {% if operation.response and operation.response.body  %}response = {% endif -%}
        api_caller.{{ operation.operation_id|snake_case }}(
{% call(properties) m.parse_request_properties_macro(property_container, 12) %}
    {% for name, value in properties.items() %}
            {{ name|setter_property_name }}={{ value }},
    {% endfor %}
{% endcall %}
        )
    {% if operation.response and operation.response.body and not operation.response.is_binary %}

        pprint(response)
    {% elif operation.response and operation.response.is_binary %}

        open("file_response.zip", "wb").write(response.read())
    {% endif %}
    except ApiException as e:
        print("Exception when calling {{ operation.api_name|pascal_case }}#{{ operation.operation_id|snake_case }}: %s\n" % e)
{{ "" }}
