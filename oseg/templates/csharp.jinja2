{%- macro print_scalar(printable) -%}
{{ printable.value }}
{%- endmacro -%}

{%- macro print_scalar_array(printable) -%}
    {% if printable.value == None %}null{% else %}
[
        {% for i in printable.value %}
    {{ i }},
        {% endfor %}
]
    {%- endif %}
{%- endmacro -%}

{%- macro print_file(printable) -%}
    {% if printable.value == None %}null{% else %}
new FileStream(
    path: "{{ printable.value }}",
    mode: FileMode.Open
)
    {%- endif %}
{%- endmacro -%}

{%- macro print_file_array(printable) -%}
    {% if printable.value == None %}null{% else %}
new List<Stream>{% if not printable.value %}(){% else %}

{
    {% for i in printable.value %}
    new FileStream(
        path: "{{ i }}",
        mode: FileMode.Open
    ),
    {% endfor %}
}
    {%- endif %}{%- endif %}
{%- endmacro -%}

{%- macro print_free_form(printable) -%}
    {% if printable.value == None %}null{% else %}
new Dictionary<string, object>{% if not printable.value %}(){% else %}

{
        {% for k, v in printable.value.items() %}
    ["{{ k }}"] = {{ v }},
        {% endfor %}
}
    {%- endif %}{%- endif %}
{%- endmacro -%}

{%- macro print_free_form_array(printable) -%}
    {% if printable.value == None %}null{% else %}
new List<Dictionary<string, object>>{% if not printable.value %}(){% else %}

{
        {% for obj in printable.value %}
    new Dictionary<string, object>
    {
            {% for k, v in obj.items() %}
        ["{{ k }}"] = {{ v }},
            {% endfor %}
    },
        {% endfor %}
}
    {%- endif %}{%- endif %}
{%- endmacro -%}

{%- macro print_object(printable) -%}
{{ printable.value|print_variablename }}
{%- endmacro -%}

{%- macro print_object_array(printable) -%}
    {% if printable.value == None %}null{% else %}
new List<{{ printable.target_type|print_classname }}>{% if not printable.value %}(){% else %}

{
        {% for i in printable.value %}
    {{ i|print_variablename }},
        {% endfor %}
}
    {%- endif %}{%- endif %}
{%- endmacro -%}

{%- macro print_security(printable) -%}
    {% set comment = "" %}
    {% if not printable.is_primary %}{% set comment = "// " %}{% endif %}
{{ comment }}config.{{ printable.method|print_methodname }} =
    {%- if printable.method == "api_key" %} new Dictionary<string, string> {["{{ printable.name }}"] = "{{ printable.value }}"};
    {%- else %} "{{ printable.value }}";{%- endif %}
{%-endmacro -%}

{%- import "_macros.jinja2" as m with context -%}

using System;
using System.Collections.Generic;
using System.IO;

using {{ config.package_name }}.Api;
using {{ config.package_name }}.Client;
using {{ config.package_name }}.Model;

{% if config.oseg_namespace %}
namespace {{ config.oseg_namespace }};

{% endif %}
public class {{ (operation.operation_id ~ "_" ~ example_name)|print_classname }}
{
    public static void Run()
    {
        var config = new Configuration();
        {% if operation.security.is_optional %}
        // Authentication is optional for this API endpoint
        {% endif %}
{% call(security_schemes) m.parse_security_macro(operation, 8) %}
    {% for _, security in security_schemes.items() %}
        {{ security }}
    {% endfor %}
{% endcall %}

{% call(objects) m.parse_objects_macro(property_container) %}
    {% for obj_name, obj in objects.items() %}
        {% if not obj.is_array %}
        var {{ obj_name|print_variablename }} = new {{ obj.type|print_classname }}(
            {% call(properties) m.parse_object_properties_macro(property_container, obj, 12) %}
                {% for name, value in properties.items() %}
            {{ name|print_propname }}: {{ value }}{% if not loop.last %},{% endif %}

                {% endfor %}
            {% endcall %}
        );
        {% else %}
        var {{ obj_name|print_variablename }} = {{ "" }}
            {%- call(value) m.parse_object_list_properties_macro(obj, 8) %}
        {{- value }};
            {% endcall %}
        {% endif %}

    {% endfor %}
{% endcall %}
        try
        {
            {{ "" -}}
{% call(properties) m.parse_api_call_properties_macro(property_container, 16) %}
            {% if operation.response and operation.response.body  %}var response = {% endif -%}
            new {{ (operation.api_name ~ "Api")|print_classname }}(config).{{ operation.operation_id|print_methodname }}({%- if not properties %});
{% else %}

    {% for name, value in properties.items() %}
                {{ name|print_propname }}: {{ value }}{% if not loop.last %},{% endif %}

    {% endfor %}
            );
{% endif %}
{% endcall %}
    {% if operation.response and operation.response.body and not operation.response.is_binary %}

            Console.WriteLine(response);
    {% elif operation.response and operation.response.is_binary %}
            var fileStream = File.Create("./file_response");
            response.Seek(0, SeekOrigin.Begin);
            response.CopyTo(fileStream);
            fileStream.Close();
    {% endif %}
        }
        catch (ApiException e)
        {
            Console.WriteLine("Exception when calling {{ operation.api_name|print_classname }}#{{ operation.operation_id|print_methodname }}: " + e.Message);
            Console.WriteLine("Status Code: " + e.ErrorCode);
            Console.WriteLine(e.StackTrace);
        }
    }
}
{{ "" }}
