{%- macro print_scalar(parsed) -%}
{{ parsed.value }}
{%- endmacro -%}

{%- macro print_scalar_array(parsed) -%}
    {% if parsed.values == None %}null{% else %}
new List<{{ parsed.target_type }}>{% if not parsed.values %}(){% else %}

{
        {% for i in parsed.values %}
    {{ i }}{% if not loop.last %},{% endif %}

        {% endfor %}
}
    {%- endif %}{%- endif %}
{%- endmacro -%}

{%- macro print_file(parsed) -%}
    {% if parsed.values == None %}null{% else %}
new FileStream(
    path: "{{ parsed.value }}",
    mode: FileMode.Open
)
    {%- endif %}
{%- endmacro -%}

{%- macro print_file_array(parsed) -%}
    {% if parsed.values == None %}null{% else %}
new List<Stream>{% if not parsed.values %}(){% else %}

{
    {% for i in parsed.values %}
    new FileStream(
        path: "{{ i }}",
        mode: FileMode.Open
    ){% if not loop.last %},{% endif %}

    {% endfor %}
}
    {%- endif %}{%- endif %}
{%- endmacro -%}

{%- macro print_free_form(parsed) -%}
    {% if parsed.value == None %}null{% else %}
new Dictionary<string, object>{% if not parsed.value %}(){% else %}

{
        {% for k, v in parsed.value.items() %}
    ["{{ k }}"]: {{ v }}{% if not loop.last %},{% endif %}

        {% endfor %}
}
    {%- endif %}{%- endif %}
{%- endmacro -%}

{%- macro print_free_form_array(parsed) -%}
    {% if parsed.values == None %}null{% else %}
new List<Dictionary<string, object>>{% if not parsed.values %}(){% else %}

{
        {% for obj in parsed.values %}
    new Dictionary<string, object>
    {
            {% for k, v in obj.items() %}
        "{{ k }}": {{ v }},
            {% endfor %}
    }{% if not loop.last %},{% endif %}

        {% endfor %}
}
    {%- endif %}{%- endif %}
{%- endmacro -%}

{%- macro print_object(parsed) -%}
{{ parsed.value }}
{%- endmacro -%}

{%- macro print_object_array(parsed) -%}
    {% if parsed.values == None %}null{% else %}
new List<{{ parsed.target_type }}>{% if not parsed.values %}(){% else %}

{
        {% for i in parsed.values %}
    {{ i|camel_case }}{% if not loop.last %},{% endif %}

        {% endfor %}
}
    {%- endif %}{%- endif %}
{%- endmacro -%}

{%- import "_macros.jinja2" as m with context -%}

using System;
using System.Collections.Generic;
using System.IO;

using {{ sdk_options.additional_properties.packageName }}.Api;
using {{ sdk_options.additional_properties.packageName }}.{{ sdk_options.additional_properties.clientPackage }};
using {{ sdk_options.additional_properties.packageName }}.Model;

public class {{ operation.operation_id|pascal_case }}{{ example_name|pascal_case }}
{
    public static void Main()
    {
        var config = new Configuration();

{% for obj_name, obj in parse_request_objects(property_container).items() %}
    {% set parent_name = obj_name if obj_name != property_container.body.type else "" %}
    {% if not obj.is_array %}
        var {{ obj_name|setter_property_name }} = new {{ obj.type }}(
        {% call(properties) m.parse_object_properties_macro(obj, parent_name, 12) %}
            {% for name, value in properties.items() %}
            {{ name|setter_property_name }}: {{ value }}{% if not loop.last %},{% endif %}

            {% endfor %}
        {% endcall %}
        );
    {% else %}
        var {{ obj_name|setter_property_name }} = {{ "" }}
        {%- call(value) m.parse_object_list_properties_macro(obj, parent_name, 8) %}
        {{- value }};
        {% endcall %}
    {% endif %}

{% endfor %}
        try
        {
            var apiCaller = new {{ operation.api_name|pascal_case }}Api(config);

            {{ "" -}}
            {% if operation.response and operation.response.body  %}var response = {% endif -%}
            apiCaller.{{ operation.operation_id|pascal_case }}(
{% call(properties) m.parse_request_properties_macro(property_container, 16) %}
    {% for name, value in properties.items() %}
                {{ name|setter_property_name }}: {{ value }}{% if not loop.last %},{% endif %}

    {% endfor %}
{% endcall %}
            );
    {% if operation.response and operation.response.body and not operation.response.is_binary %}

            Console.WriteLine(response);
    {% elif operation.response and operation.response.is_binary %}
            var fileStream = File.Create("file_response.zip");
            response.Seek(0, SeekOrigin.Begin);
            response.CopyTo(fileStream);
            fileStream.Close();
    {% endif %}
        }
        catch (ApiException e)
        {
            Console.WriteLine("Exception when calling {{ operation.api_name|pascal_case }}#{{ operation.operation_id|pascal_case }}: " + e.Message);
            Console.WriteLine("Status Code: " + e.ErrorCode);
            Console.WriteLine(e.StackTrace);
        }
    }
}
{{ "" }}
